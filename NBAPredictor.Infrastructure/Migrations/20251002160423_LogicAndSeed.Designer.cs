// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NBAPredictor.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NBAPredictor.Infrastructure.Migrations
{
    [DbContext(typeof(NBAPredictionDbContext))]
    [Migration("20251002160423_LogicAndSeed")]
    partial class LogicAndSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("007b9dca-a1da-47d7-afe9-0fc389b8bf4d"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b07874d0-4983-4bd8-9ce6-f09148abf73c"),
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("YearEnd")
                        .HasColumnType("integer");

                    b.Property<int>("YearStart")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "2024/25",
                            YearEnd = 2025,
                            YearStart = 2024
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "2025/26",
                            YearEnd = 2026,
                            YearStart = 2025
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "2026/27",
                            YearEnd = 2027,
                            YearStart = 2026
                        });
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.SeasonResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActualRank")
                        .HasColumnType("integer");

                    b.Property<int>("Conference")
                        .HasColumnType("integer");

                    b.Property<int>("Losses")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("Wins")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.ToTable("SeasonResults");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualRank = 1,
                            Conference = 0,
                            Losses = 18,
                            SeasonId = 1,
                            TeamId = 7,
                            Wins = 64
                        },
                        new
                        {
                            Id = 2,
                            ActualRank = 2,
                            Conference = 0,
                            Losses = 21,
                            SeasonId = 1,
                            TeamId = 1,
                            Wins = 61
                        },
                        new
                        {
                            Id = 3,
                            ActualRank = 3,
                            Conference = 0,
                            Losses = 31,
                            SeasonId = 1,
                            TeamId = 3,
                            Wins = 51
                        },
                        new
                        {
                            Id = 4,
                            ActualRank = 4,
                            Conference = 0,
                            Losses = 32,
                            SeasonId = 1,
                            TeamId = 9,
                            Wins = 50
                        },
                        new
                        {
                            Id = 5,
                            ActualRank = 5,
                            Conference = 0,
                            Losses = 34,
                            SeasonId = 1,
                            TeamId = 10,
                            Wins = 48
                        },
                        new
                        {
                            Id = 6,
                            ActualRank = 6,
                            Conference = 0,
                            Losses = 38,
                            SeasonId = 1,
                            TeamId = 8,
                            Wins = 44
                        },
                        new
                        {
                            Id = 7,
                            ActualRank = 7,
                            Conference = 0,
                            Losses = 41,
                            SeasonId = 1,
                            TeamId = 14,
                            Wins = 41
                        },
                        new
                        {
                            Id = 8,
                            ActualRank = 8,
                            Conference = 0,
                            Losses = 42,
                            SeasonId = 1,
                            TeamId = 11,
                            Wins = 40
                        },
                        new
                        {
                            Id = 9,
                            ActualRank = 9,
                            Conference = 0,
                            Losses = 43,
                            SeasonId = 1,
                            TeamId = 6,
                            Wins = 39
                        },
                        new
                        {
                            Id = 10,
                            ActualRank = 10,
                            Conference = 0,
                            Losses = 45,
                            SeasonId = 1,
                            TeamId = 13,
                            Wins = 37
                        },
                        new
                        {
                            Id = 11,
                            ActualRank = 11,
                            Conference = 0,
                            Losses = 52,
                            SeasonId = 1,
                            TeamId = 5,
                            Wins = 30
                        },
                        new
                        {
                            Id = 12,
                            ActualRank = 12,
                            Conference = 0,
                            Losses = 56,
                            SeasonId = 1,
                            TeamId = 2,
                            Wins = 26
                        },
                        new
                        {
                            Id = 13,
                            ActualRank = 13,
                            Conference = 0,
                            Losses = 58,
                            SeasonId = 1,
                            TeamId = 4,
                            Wins = 24
                        },
                        new
                        {
                            Id = 14,
                            ActualRank = 14,
                            Conference = 0,
                            Losses = 63,
                            SeasonId = 1,
                            TeamId = 12,
                            Wins = 19
                        },
                        new
                        {
                            Id = 15,
                            ActualRank = 15,
                            Conference = 0,
                            Losses = 64,
                            SeasonId = 1,
                            TeamId = 15,
                            Wins = 18
                        },
                        new
                        {
                            Id = 16,
                            ActualRank = 1,
                            Conference = 1,
                            Losses = 14,
                            SeasonId = 1,
                            TeamId = 18,
                            Wins = 68
                        },
                        new
                        {
                            Id = 17,
                            ActualRank = 2,
                            Conference = 1,
                            Losses = 30,
                            SeasonId = 1,
                            TeamId = 27,
                            Wins = 52
                        },
                        new
                        {
                            Id = 18,
                            ActualRank = 3,
                            Conference = 1,
                            Losses = 32,
                            SeasonId = 1,
                            TeamId = 23,
                            Wins = 50
                        },
                        new
                        {
                            Id = 19,
                            ActualRank = 4,
                            Conference = 1,
                            Losses = 32,
                            SeasonId = 1,
                            TeamId = 16,
                            Wins = 50
                        },
                        new
                        {
                            Id = 20,
                            ActualRank = 5,
                            Conference = 1,
                            Losses = 32,
                            SeasonId = 1,
                            TeamId = 22,
                            Wins = 50
                        },
                        new
                        {
                            Id = 21,
                            ActualRank = 6,
                            Conference = 1,
                            Losses = 33,
                            SeasonId = 1,
                            TeamId = 17,
                            Wins = 49
                        },
                        new
                        {
                            Id = 22,
                            ActualRank = 7,
                            Conference = 1,
                            Losses = 34,
                            SeasonId = 1,
                            TeamId = 21,
                            Wins = 48
                        },
                        new
                        {
                            Id = 23,
                            ActualRank = 8,
                            Conference = 1,
                            Losses = 34,
                            SeasonId = 1,
                            TeamId = 28,
                            Wins = 48
                        },
                        new
                        {
                            Id = 24,
                            ActualRank = 9,
                            Conference = 1,
                            Losses = 42,
                            SeasonId = 1,
                            TeamId = 25,
                            Wins = 40
                        },
                        new
                        {
                            Id = 25,
                            ActualRank = 10,
                            Conference = 1,
                            Losses = 43,
                            SeasonId = 1,
                            TeamId = 26,
                            Wins = 39
                        },
                        new
                        {
                            Id = 26,
                            ActualRank = 11,
                            Conference = 1,
                            Losses = 46,
                            SeasonId = 1,
                            TeamId = 24,
                            Wins = 36
                        },
                        new
                        {
                            Id = 27,
                            ActualRank = 12,
                            Conference = 1,
                            Losses = 46,
                            SeasonId = 1,
                            TeamId = 19,
                            Wins = 36
                        },
                        new
                        {
                            Id = 28,
                            ActualRank = 13,
                            Conference = 1,
                            Losses = 48,
                            SeasonId = 1,
                            TeamId = 30,
                            Wins = 34
                        },
                        new
                        {
                            Id = 29,
                            ActualRank = 14,
                            Conference = 1,
                            Losses = 61,
                            SeasonId = 1,
                            TeamId = 29,
                            Wins = 21
                        },
                        new
                        {
                            Id = 30,
                            ActualRank = 15,
                            Conference = 1,
                            Losses = 65,
                            SeasonId = 1,
                            TeamId = 20,
                            Wins = 17
                        });
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Conference")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviation = "BOS",
                            City = "Boston",
                            Conference = 0,
                            Name = "Boston Celtics"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviation = "BKN",
                            City = "New York",
                            Conference = 0,
                            Name = "Brooklyn Nets"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviation = "NYK",
                            City = "New York",
                            Conference = 0,
                            Name = "New York Knicks"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviation = "PHI",
                            City = "Philadelphia",
                            Conference = 0,
                            Name = "Philadelphia 76ers"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviation = "TOR",
                            City = "Toronto",
                            Conference = 0,
                            Name = "Toronto Raptors"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviation = "CHI",
                            City = "Chicago",
                            Conference = 0,
                            Name = "Chicago Bulls"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviation = "CLE",
                            City = "Cleveland",
                            Conference = 0,
                            Name = "Cleveland Cavaliers"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviation = "DET",
                            City = "Detroit",
                            Conference = 0,
                            Name = "Detroit Pistons"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviation = "IND",
                            City = "Indianapolis",
                            Conference = 0,
                            Name = "Indiana Pacers"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviation = "MIL",
                            City = "Milwaukee",
                            Conference = 0,
                            Name = "Milwaukee Bucks"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviation = "ATL",
                            City = "Atlanta",
                            Conference = 0,
                            Name = "Atlanta Hawks"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviation = "CHA",
                            City = "Charlotte",
                            Conference = 0,
                            Name = "Charlotte Hornets"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviation = "MIA",
                            City = "Miami",
                            Conference = 0,
                            Name = "Miami Heat"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviation = "ORL",
                            City = "Orlando",
                            Conference = 0,
                            Name = "Orlando Magic"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviation = "WAS",
                            City = "Washington",
                            Conference = 0,
                            Name = "Washington Wizards"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviation = "DEN",
                            City = "Denver",
                            Conference = 1,
                            Name = "Denver Nuggets"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviation = "MIN",
                            City = "Minneapolis",
                            Conference = 1,
                            Name = "Minnesota Timberwolves"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviation = "OKC",
                            City = "Oklahoma City",
                            Conference = 1,
                            Name = "Oklahoma City Thunder"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviation = "POR",
                            City = "Portland",
                            Conference = 1,
                            Name = "Portland Trail Blazers"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviation = "UTA",
                            City = "Salt Lake City",
                            Conference = 1,
                            Name = "Utah Jazz"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviation = "GSW",
                            City = "San Francisco",
                            Conference = 1,
                            Name = "Golden State Warriors"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviation = "LAC",
                            City = "Los Angeles",
                            Conference = 1,
                            Name = "Los Angeles Clippers"
                        },
                        new
                        {
                            Id = 23,
                            Abbreviation = "LAL",
                            City = "Los Angeles",
                            Conference = 1,
                            Name = "Los Angeles Lakers"
                        },
                        new
                        {
                            Id = 24,
                            Abbreviation = "PHX",
                            City = "Phoenix",
                            Conference = 1,
                            Name = "Phoenix Suns"
                        },
                        new
                        {
                            Id = 25,
                            Abbreviation = "SAC",
                            City = "Sacramento",
                            Conference = 1,
                            Name = "Sacramento Kings"
                        },
                        new
                        {
                            Id = 26,
                            Abbreviation = "DAL",
                            City = "Dallas",
                            Conference = 1,
                            Name = "Dallas Mavericks"
                        },
                        new
                        {
                            Id = 27,
                            Abbreviation = "HOU",
                            City = "Houston",
                            Conference = 1,
                            Name = "Houston Rockets"
                        },
                        new
                        {
                            Id = 28,
                            Abbreviation = "MEM",
                            City = "Memphis",
                            Conference = 1,
                            Name = "Memphis Grizzlies"
                        },
                        new
                        {
                            Id = 29,
                            Abbreviation = "NOP",
                            City = "New Orlean",
                            Conference = 1,
                            Name = "New Orleans Pelicans"
                        },
                        new
                        {
                            Id = 30,
                            Abbreviation = "SAS",
                            City = "San Antonio",
                            Conference = 1,
                            Name = "San Antonio Spurs"
                        });
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiresAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.UserBet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Conference")
                        .HasColumnType("integer");

                    b.Property<int>("PredictedRank")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserBets");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.UserScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserScores");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBAPredictor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.SeasonResult", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.Season", "Season")
                        .WithMany("Results")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBAPredictor.Domain.Entities.Team", "Team")
                        .WithMany("Results")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.UserBet", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.Season", "Season")
                        .WithMany("Bets")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBAPredictor.Domain.Entities.Team", "Team")
                        .WithMany("Bets")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBAPredictor.Domain.Entities.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.UserScore", b =>
                {
                    b.HasOne("NBAPredictor.Domain.Entities.Season", "Season")
                        .WithMany("Scores")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NBAPredictor.Domain.Entities.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.Season", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Results");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.Team", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("NBAPredictor.Domain.Entities.User", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
